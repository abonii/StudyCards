package abm.co.feature.game.reviewimport abm.co.designsystem.component.dialog.ShowDialogOnBackPressedimport abm.co.designsystem.component.modifier.Modifierimport abm.co.designsystem.component.systembar.SetStatusBarColorimport abm.co.designsystem.component.toolbar.Toolbarimport abm.co.designsystem.component.widget.LinearProgressimport abm.co.designsystem.extensions.collectInLifecycleimport abm.co.designsystem.message.common.MessageContentimport abm.co.designsystem.theme.StudyCardsThemeimport abm.co.feature.Rimport abm.co.feature.game.review.model.ReviewItemUIimport abm.co.feature.utils.AnalyticsManagerimport androidx.compose.animation.core.animateFloatAsStateimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.navigationBarsPaddingimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.statusBarsPaddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.pager.HorizontalPagerimport androidx.compose.foundation.pager.PagerDefaultsimport androidx.compose.foundation.pager.PagerStateimport androidx.compose.foundation.pager.rememberPagerStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.derivedStateOfimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.snapshotFlowimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.shadowimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.graphicsLayerimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.res.dimensionResourceimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.constraintlayout.compose.ConstraintLayoutimport androidx.hilt.navigation.compose.hiltViewModelimport coil.compose.AsyncImageimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlin.math.abs@Composablefun ReviewPage(    nextPageAfterFinish: () -> Unit,    navigateBack: (isRepeat: Boolean) -> Unit,    showMessage: suspend (MessageContent) -> Unit,    viewModel: ReviewViewModel = hiltViewModel()) {    LaunchedEffect(Unit) {        AnalyticsManager.sendEvent("review_page_viewed")    }    val showDialog = remember { mutableStateOf(false) }    val uiState = viewModel.state    viewModel.channel.collectInLifecycle {        when (it) {            is ReviewContractChannel.ShowMessage -> showMessage(it.messageContent)            ReviewContractChannel.NavigateBack -> {                showDialog.value = true            }            ReviewContractChannel.Finished -> {                if(uiState.isRepeat) {                    nextPageAfterFinish()                } else {                    navigateBack(false)                }            }        }    }    ShowDialogOnBackPressed(        show = showDialog,        onConfirm = {            navigateBack(uiState.isRepeat)        }    )    SetStatusBarColor()    Screen(        uiState = uiState,        onEvent = viewModel::onEvent    )}@OptIn(ExperimentalFoundationApi::class)@Composableprivate fun Screen(    uiState: ReviewContractState,    onEvent: (ReviewContractEvent) -> Unit) {    Column(        modifier = Modifier            .background(StudyCardsTheme.colors.backgroundPrimary)            .fillMaxSize()            .navigationBarsPadding()    ) {        val pagerState = rememberPagerState()        LaunchedEffect(pagerState) {            snapshotFlow {                pagerState.currentPage            }.onEach {                if (it >= uiState.items.lastIndex) {                    onEvent(ReviewContractEvent.OnFinish)                }            }.launchIn(this)        }        if (!uiState.isRepeat) {            Toolbar(                modifier = Modifier.statusBarsPadding(),                title = stringResource(id = R.string.Review_Toolbar_title),                onBack = {                    onEvent(ReviewContractEvent.OnBack)                }            )            Progress(                modifier = Modifier.padding(bottom = 10.dp),                pagerState = pagerState,                itemCount = uiState.items.size            )        }        Pager(            pagerState = pagerState,            items = uiState.items,            modifier = Modifier.weight(1f)        )    }}@OptIn(ExperimentalFoundationApi::class)@Composableprivate fun Pager(    items: List<ReviewItemUI>,    modifier: Modifier = Modifier,    pagerState: PagerState = rememberPagerState()) {    HorizontalPager(        modifier = modifier,        state = pagerState,        pageCount = items.size,        contentPadding = PaddingValues(vertical = 10.dp, horizontal = 16.dp),        pageSpacing = 16.dp,        flingBehavior = PagerDefaults.flingBehavior(state = pagerState),        key = { index -> items[index].cardID }    ) { index ->        val scale by remember {            derivedStateOf {                val offset = abs(pagerState.currentPageOffsetFraction)                1 - offset.coerceAtMost(0.1f)            }        }        Item(            item = items[index],            scale = scale,            modifier = Modifier.fillMaxSize()        )    }}@Composableprivate fun Item(    item: ReviewItemUI,    scale: Float,    modifier: Modifier = Modifier) {    val animateScale by animateFloatAsState(targetValue = scale, label = "item scale")    ConstraintLayout(        modifier = modifier            .graphicsLayer(                scaleX = animateScale,                scaleY = animateScale            )            .shadow(                elevation = 8.dp,                shape = RoundedCornerShape(16.dp),                ambientColor = Color.Transparent,                spotColor = StudyCardsTheme.colors.primary            )            .clip(RoundedCornerShape(16.dp))            .background(StudyCardsTheme.colors.backgroundPrimary)    ) {        val (image, title, translate) = createRefs()        if (item.imageURL.isNotBlank()) {            AsyncImage(                modifier = Modifier                    .constrainAs(image) {                        bottom.linkTo(title.top, margin = 10.dp)                        centerHorizontallyTo(parent)                    }                    .clip(RoundedCornerShape(8.dp))                    .width(dimensionResource(id = abm.co.designsystem.R.dimen.square_word_image_width))                    .height(dimensionResource(id = abm.co.designsystem.R.dimen.square_word_image_height)),                model = item.imageURL,                contentDescription = null,                contentScale = ContentScale.Crop,                error = painterResource(id = R.drawable.ic_image)            )        }        Text(            modifier = Modifier                .constrainAs(title) {                    centerVerticallyTo(parent)                    centerHorizontallyTo(parent)                }                .padding(horizontal = 30.dp),            text = item.title,            style = StudyCardsTheme.typography.weight600Size16LineHeight18,            textAlign = TextAlign.Center        )        Text(            modifier = Modifier                .constrainAs(translate) {                    bottom.linkTo(parent.bottom, margin = 16.dp)                    end.linkTo(parent.end, margin = 16.dp)                }                .padding(bottom = 16.dp, end = 16.dp),            text = item.translation,            style = StudyCardsTheme.typography.weight500Size14LineHeight20,            color = StudyCardsTheme.colors.textSecondary        )    }}@OptIn(ExperimentalFoundationApi::class)@Composableprivate fun Progress(    pagerState: PagerState,    itemCount: Int,    modifier: Modifier = Modifier,    onProgressFinished: (() -> Unit)? = null) {    val progress by remember(itemCount) {        derivedStateOf {            (pagerState.currentPage + 1).toFloat() / itemCount        }    }    LinearProgress(        progressFloat = progress,        modifier = modifier            .padding(horizontal = 16.dp)            .clip(RoundedCornerShape(7.dp))            .height(6.dp)            .fillMaxWidth(),        onReach100Percent = onProgressFinished    )}